import ast
import pandas as pd

def find_variables_in_code(code_string):
    """
    Parse Python code and identify variables by scope within each function.
    
    Args:
        code_string (str): Python code as a string
        
    Returns:
        tuple: (global_vars, functions_data)
    """
    global_vars = set()
    functions_data = {}
    
    # Parse the code
    try:
        tree = ast.parse(code_string)
    except SyntaxError as e:
        return {"error": f"Syntax error in code: {str(e)}"}
    
    # Find global variables
    for node in ast.walk(tree):
        if isinstance(node, ast.Assign) and not isinstance(node.parent, ast.FunctionDef):
            for target in node.targets:
                if isinstance(target, ast.Name):
                    global_vars.add(target.id)
    
    # Process each function
    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef):
            function_name = node.name
            
            # Get parameters
            params = [arg.arg for arg in node.args.args]
            
            # Initialize function data
            functions_data[function_name] = {
                'params': params,
                'local_vars': set(),
                'global_refs': set()
            }
            
            # Find local variables and global references
            for subnode in ast.walk(node):
                # Find explicit global declarations
                if isinstance(subnode, ast.Global):
                    for name in subnode.names:
                        functions_data[function_name]['global_refs'].add(name)
                
                # Find variable assignments (potential local variables)
                elif isinstance(subnode, ast.Assign):
                    for target in subnode.targets:
                        if isinstance(target, ast.Name):
                            # If not a global reference and not a parameter, it's a local var
                            if (target.id not in functions_data[function_name]['global_refs'] and 
                                target.id not in params):
                                functions_data[function_name]['local_vars'].add(target.id)
    
    return global_vars, functions_data

def export_to_excel(global_vars, functions_data, output_file='variable_analysis.xlsx'):
    """
    Export variable analysis to Excel
    
    Args:
        global_vars (set): Global variables
        functions_data (dict): Function data with parameters and variables
        output_file (str): Output Excel file path
        
    Returns:
        str: Path to the created Excel file
    """
    # Prepare data for Excel
    rows = []
    
    # Add global variables
    for var in global_vars:
        rows.append({
            'Function Name': 'GLOBAL',
            'Variable Name': var,
            'Type': 'Variable',
            'Scope': 'Global',
            'Is Parameter': 'No'
        })
    
    # Add function variables
    for func_name, data in functions_data.items():
        # Add parameters
        for param in data['params']:
            rows.append({
                'Function Name': func_name,
                'Variable Name': param,
                'Type': 'Parameter',
                'Scope': 'Local',
                'Is Parameter': 'Yes'
            })
        
        # Add local variables
        for var in data['local_vars']:
            rows.append({
                'Function Name': func_name,
                'Variable Name': var,
                'Type': 'Variable',
                'Scope': 'Local',
                'Is Parameter': 'No'
            })
        
        # Add global references
        for var in data['global_refs']:
            rows.append({
                'Function Name': func_name,
                'Variable Name': var,
                'Type': 'Variable',
                'Scope': 'Global',
                'Is Parameter': 'No'
            })
    
    # Create DataFrame and export to Excel
    df = pd.DataFrame(rows)
    df.to_excel(output_file, index=False)
    
    return output_file

def analyze_python_file(file_path, output_excel='variable_analysis.xlsx'):
    """
    Analyze a Python file and export variable information to Excel
    
    Args:
        file_path (str): Path to Python file
        output_excel (str): Path to output Excel file
        
    Returns:
        str: Path to the created Excel file
    """
    try:
        with open(file_path, 'r') as f:
            code = f.read()
        
        global_vars, functions_data = find_variables_in_code(code)
        return export_to_excel(global_vars, functions_data, output_excel)
    
    except Exception as e:
        print(f"Error: {str(e)}")
        return None

def analyze_python_code(code_string, output_excel='variable_analysis.xlsx'):
    """
    Analyze Python code string and export variable information to Excel
    
    Args:
        code_string (str): Python code as a string
        output_excel (str): Path to output Excel file
        
    Returns:
        str: Path to the created Excel file
    """
    try:
        global_vars, functions_data = find_variables_in_code(code_string)
        return export_to_excel(global_vars, functions_data, output_excel)
    
    except Exception as e:
        print(f"Error: {str(e)}")
        return None

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # If file path is provided as command line argument
        file_path = sys.argv[1]
        output = analyze_python_file(file_path)
        if output:
            print(f"Analysis completed. Results saved to {output}")
    else:
        # Otherwise prompt for input
        print("How would you like to provide the Python code?")
        print("1. Enter a file path")
        print("2. Paste code directly")
        
        choice = input("Enter your choice (1 or 2): ")
        
        if choice == '1':
            file_path = input("Enter the path to your Python file: ")
            output = analyze_python_file(file_path)
            if output:
                print(f"Analysis completed. Results saved to {output}")
        elif choice == '2':
            print("Paste your Python code below (press Ctrl+D or Ctrl+Z when finished):")
            code = sys.stdin.read()
            output = analyze_python_code(code)
            if output:
                print(f"Analysis completed. Results saved to {output}")
        else:
            print("Invalid choice.")
