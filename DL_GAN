import ast
import os
import pandas as pd
import matplotlib.pyplot as plt
import networkx as nx
from networkx.drawing.nx_pydot import graphviz_layout

class VariableFinder(ast.NodeVisitor):
    def __init__(self):
        self.functions = {}
        self.current_function = None
        self.global_vars = set()
        
    def visit_FunctionDef(self, node):
        prev_function = self.current_function
        self.current_function = node.name
        self.functions[node.name] = {
            'local_vars': set(),
            'global_vars': set(),
            'params': {param.arg for param in node.args.args}
        }
        
        # Visit all nodes in the function body
        for child in node.body:
            self.visit(child)
            
        self.current_function = prev_function
        
    def visit_Global(self, node):
        if self.current_function:
            self.functions[self.current_function]['global_vars'].update(node.names)
            
    def visit_Name(self, node):
        if isinstance(node.ctx, ast.Store):
            if self.current_function:
                # Inside a function, might be local or global
                if node.id not in self.functions[self.current_function]['global_vars'] and \
                   node.id not in self.functions[self.current_function]['params']:
                    self.functions[self.current_function]['local_vars'].add(node.id)
            else:
                # Outside any function, must be global
                self.global_vars.add(node.id)
                
        # Continue visiting child nodes
        self.generic_visit(node)

def analyze_python_file(file_path):
    with open(file_path, 'r') as file:
        code = file.read()
    
    # Parse the code into an AST
    tree = ast.parse(code)
    
    # Find all variables and their scopes
    finder = VariableFinder()
    finder.visit(tree)
    
    return finder.global_vars, finder.functions

def create_tree_visualization(global_vars, functions, output_file="variable_tree.png"):
    G = nx.DiGraph()
    
    # Add the root node
    G.add_node("Python Code")
    
    # Add global variables
    if global_vars:
        G.add_node("Global Variables")
        G.add_edge("Python Code", "Global Variables")
        for var in global_vars:
            var_node = f"Global: {var}"
            G.add_node(var_node)
            G.add_edge("Global Variables", var_node)
    
    # Add functions and their variables
    if functions:
        G.add_node("Functions")
        G.add_edge("Python Code", "Functions")
        
        for func_name, vars_dict in functions.items():
            func_node = f"Function: {func_name}"
            G.add_node(func_node)
            G.add_edge("Functions", func_node)
            
            # Parameters
            if vars_dict['params']:
                params_node = f"{func_name} Parameters"
                G.add_node(params_node)
                G.add_edge(func_node, params_node)
                for param in vars_dict['params']:
                    param_node = f"Param: {param}"
                    G.add_node(param_node)
                    G.add_edge(params_node, param_node)
            
            # Local variables
            if vars_dict['local_vars']:
                locals_node = f"{func_name} Local Variables"
                G.add_node(locals_node)
                G.add_edge(func_node, locals_node)
                for var in vars_dict['local_vars']:
                    var_node = f"Local: {var}"
                    G.add_node(var_node)
                    G.add_edge(locals_node, var_node)
            
            # Global variables used in this function
            if vars_dict['global_vars']:
                func_globals_node = f"{func_name} Global References"
                G.add_node(func_globals_node)
                G.add_edge(func_node, func_globals_node)
                for var in vars_dict['global_vars']:
                    var_node = f"Global Ref: {var}"
                    G.add_node(var_node)
                    G.add_edge(func_globals_node, var_node)
    
    # Create the visualization
    plt.figure(figsize=(12, 8))
    pos = graphviz_layout(G, prog="dot")
    nx.draw(G, pos, with_labels=True, arrows=True, node_size=2000, 
            node_color="lightblue", font_size=8, font_weight="bold")
    plt.savefig(output_file, dpi=300, bbox_inches="tight")
    plt.close()
    
    return output_file

def export_to_excel(global_vars, functions, output_file="variable_analysis.xlsx"):
    # Create dataframes for Excel
    data = []
    
    # Add global variables
    for var in global_vars:
        data.append({
            'Variable': var,
            'Scope': 'Global',
            'Function': 'N/A',
            'Type': 'Variable'
        })
    
    # Add function variables
    for func_name, vars_dict in functions.items():
        # Add parameters
        for param in vars_dict['params']:
            data.append({
                'Variable': param,
                'Scope': 'Parameter',
                'Function': func_name,
                'Type': 'Parameter'
            })
        
        # Add local variables
        for var in vars_dict['local_vars']:
            data.append({
                'Variable': var,
                'Scope': 'Local',
                'Function': func_name,
                'Type': 'Variable'
            })
        
        # Add global references
        for var in vars_dict['global_vars']:
            data.append({
                'Variable': var,
                'Scope': 'Global',
                'Function': func_name,
                'Type': 'Global Reference'
            })
    
    # Create DataFrame and export to Excel
    df = pd.DataFrame(data)
    df.to_excel(output_file, index=False)
    
    return output_file

def main():
    # Get input from user
    file_path = input("Enter the path to your Python file: ")
    
    if not os.path.exists(file_path):
        print(f"Error: File '{file_path}' does not exist.")
        return
    
    # Analyze the file
    global_vars, functions = analyze_python_file(file_path)
    
    # Create visualization
    viz_file = create_tree_visualization(global_vars, functions)
    print(f"Tree visualization saved as '{viz_file}'")
    
    # Export to Excel
    excel_file = export_to_excel(global_vars, functions)
    print(f"Variable analysis exported to '{excel_file}'")
    
    # Print summary
    print("\nAnalysis Summary:")
    print(f"Global Variables: {len(global_vars)}")
    print(f"Functions: {len(functions)}")
    
    for func_name, vars_dict in functions.items():
        print(f"\nFunction: {func_name}")
        print(f"  Parameters: {len(vars_dict['params'])}")
        print(f"  Local Variables: {len(vars_dict['local_vars'])}")
        print(f"  Global References: {len(vars_dict['global_vars'])}")

if __name__ == "__main__":
    main()
